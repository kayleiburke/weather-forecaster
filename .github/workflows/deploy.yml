name: Deploy to ECS

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build the Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build \
            --build-arg GEOCODIO_API_KEY=${{ secrets.GEOCODIO_API_KEY }} \
            --build-arg OPENWEATHER_API_KEY=${{ secrets.OPENWEATHER_API_KEY }} \
            --build-arg SECRET_KEY_BASE=${{ secrets.RAILS_SECRET_KEY_BASE }} \
            -t my-app .
          docker tag my-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Register new task definition
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ secrets.TASK_FAMILY }})
          
          CLEAN_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | \
            jq '.taskDefinition | del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          
          NEW_TASK_DEFINITION=$(echo "$CLEAN_TASK_DEFINITION" | \
            jq '.containerDefinitions[0].image = "${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest" |
                .containerDefinitions[0].portMappings = [{containerPort: 3000, hostPort: 80}] |
                .networkMode = "awsvpc" |
                .requiresCompatibilities = ["FARGATE"] |
                .cpu = "512" |
                .memory = "1024"')
          
          echo "$NEW_TASK_DEFINITION" > new-task-def.json
          
          # Register the new task definition and capture the ARN
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)
          echo "New task definition ARN: $NEW_TASK_DEF_ARN"

      - name: Update ECS service with load balancer
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment